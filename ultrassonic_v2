#include <Arduino.h>
#include <analogWrite.h>

int PinTrigger1 = 18; // Pino usado para disparar os pulsos do sensor aereo
int PinEcho1 = 19; // pino usado para ler a saida do sensor aereo
int PinTrigger2 = 16; // Pino usado para disparar os pulsos do sensor terrestre
int PinEcho2 = 17; // pino usado para ler a saida do sensor terrestre

//int vibracall = 25;
int buzzer1 = 23; // buzzer referente ao sensor aereo
int buzzer2 = 5; // buzzer referente ao sensor terrestre

int freq1 = 2000; //para buzzer aereo
int freq2 = 200; //para buzzer terrestre -- tem que testar esse valor na pratica ate achar uma frequencia grave boa
int res = 8;
int TONE_PWM_CHANNEL1 = 1;//para buzzer aereo
int TONE_PWM_CHANNEL2 = 2; //para buzzer terrestre
int tempo = 10000;

float TempEcho1 = 0;
float TempEcho2 = 0;

//const float VelocidadeSom_mpors = 340; // em metros por segundo
const float VelocidadeSom_mporus = 0.000340; // em metros por microsegundo
float cm = 0;

// Funçao para enviar o pulso de trigger
void DisparaPulsoUltrassonico(){
  // Para fazer o HC-SR04 enviar um pulso ultrassonico, nos temos
  // que enviar para o pino de trigger um sinal de nivel alto
  // com pelo menos 10us de duraçao
  digitalWrite(PinTrigger1, HIGH);
  delayMicroseconds(10);
  digitalWrite(PinTrigger1, LOW);
  
  digitalWrite(PinTrigger2, HIGH);
  delayMicroseconds(10);
  digitalWrite(PinTrigger2, LOW);
  }
  
// Função para calcular a distancia em metros
float CalculaDistancia(float tempo_us){
  return((tempo_us*VelocidadeSom_mporus)/2);
}

void setup(){
  // Configura pino de Trigger1 como saída e inicializa com nível baixo
  pinMode(PinTrigger1, OUTPUT);
  digitalWrite(PinTrigger1, LOW);
  pinMode(PinEcho1, INPUT); // configura pino ECHO1 como entrada
 // Configura pino de Trigger2 como saída e inicializa com nível baixo
  pinMode(PinTrigger2, OUTPUT);
  digitalWrite(PinTrigger2, LOW);
  pinMode(PinEcho2, INPUT); // configura pino ECHO2 como entrada
  
  //pinMode (vibracall, OUTPUT);
  
  pinMode (buzzer1, OUTPUT);
  ledcSetup(TONE_PWM_CHANNEL1,freq1, res);
  ledcAttachPin(buzzer1, TONE_PWM_CHANNEL1);
  pinMode (buzzer2, OUTPUT);
  ledcSetup(TONE_PWM_CHANNEL2,freq2, res);
  ledcAttachPin(buzzer2, TONE_PWM_CHANNEL2);
  
  // Inicializa a porta serial
  Serial.begin(9600);
  delay(100);
}
void loop(){
  // Envia pulso para o disparar o sensor
  
  DisparaPulsoUltrassonico();
  // Mede o tempo de duração do sinal no pino de leitura(us)
  TempEcho1 = pulseIn(PinEcho1, HIGH);
  cm1 = CalculaDistancia(TempEcho1)*100;
  TempEcho2 = pulseIn(PinEcho2, HIGH);
  cm2 = CalculaDistancia(TempEcho2)*100;

  Serial.println("Distancia em centimetros aereo: ");
  Serial.println(cm1);
  Serial.println("\n");
  Serial.println("Distancia em centimetros terrestre: ");
  Serial.println(cm2);
  Serial.println("\n");
  //analogWrite(vibracall,0); 
 
  if(cm1 <= 200){ //antes tava 2, nao sei se é so pq a gente tava testando ou oq, mas acho q pra ser 2m é isso ne
    Serial.print("Obstaculo, cuidado aereo!\n");

    ledcWrite(TONE_PWM_CHANNEL1, tempo);
    //delay(100);    -- tem que ver, talvez esse delay seja necessario se nao nao vai nem ouvir o barulho se for mt rapido
    ledcWrite(TONE_PWM_CHANNEL1, 0); // Stop tone 
       
  }
  if(cm2 <= 200){ 
    Serial.print("Obstaculo, cuidado terrestre!\n");

    ledcWrite(TONE_PWM_CHANNEL2, tempo);
    //delay(100);    
    ledcWrite(TONE_PWM_CHANNEL2, 0); // Stop tone 
       
  }
  // aguarda um pouco antes de começar tudo de novo
  delay(100);
}
